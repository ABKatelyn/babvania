<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>standR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization Logic

//Variables
isFalling = 0;
isSprinting = 0;
diaperState = PLAYER_DIAPER_DRY;
height = 72;
width = 60;
sprintMeter = PLAYER_SPRINT_MAX;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement

//Sprint check
if (keyboard_check(global.settingsID.key_sprint) &amp;&amp; self.sprintMeter &gt;= PLAYER_SPRINT_MIN)
{
    self.isSprinting = true;
}

//Left/right movement
if (keyboard_check(global.settingsID.key_right) &amp;&amp; !keyboard_check(global.settingsID.key_left)){ //Right
    sprite_index = standR;
    if (self.hspeed + PLAYER_ACCEL &lt; getMaxSpeed(self)) {
        self.hspeed += PLAYER_ACCEL;
    } else {
        hspeed = getMaxSpeed(self);
    }
} else if (!keyboard_check(global.settingsID.key_right) &amp;&amp; keyboard_check(global.settingsID.key_left)) { //Left
    sprite_index = standL;
    if (self.hspeed - PLAYER_ACCEL &gt; -1*getMaxSpeed(self)) {
        self.hspeed -= PLAYER_ACCEL;
    } else {
        hspeed = -1*getMaxSpeed(self);
    }
} else if (hspeed != 0) { //Stopping/released keys
    isSprinting = false;
    if (hspeed &gt; PLAYER_ACCEL) {
        hspeed -= PLAYER_ACCEL;
    } else if (hspeed &lt; -1*PLAYER_ACCEL) {
        hspeed += PLAYER_ACCEL;
    } else if ((hspeed &gt; 0 &amp;&amp; hspeed &lt;=PLAYER_ACCEL) || (hspeed &lt; 0 &amp;&amp; hspeed &gt;=-PLAYER_ACCEL)) {
        hspeed = 0; //Set speed to zero if below a certain point
    }
}

//Jumping
if (keyboard_check(global.settingsID.key_jump) &amp;&amp; !self.isFalling) {
    self.vspeed = -1*PLAYER_SPEED_JUMP;
    self.isFalling = true;
    audio_play_sound(player_jump_start, 1, false);
}

//Falling
if (place_free(x+hspeed, y+1) &amp;&amp; !isFalling)
    isFalling = true; //fall if not on ground
    
if (isFalling &amp;&amp; vspeed + GRAVITY &lt; GRAVITY_TERMINAL) { //gravity affects speed
    self.vspeed += GRAVITY;
} else if (isFalling &amp;&amp; vspeed + GRAVITY &gt;= GRAVITY_TERMINAL) {
    self.vspeed = GRAVITY_TERMINAL;
}

//Y Collision detection
if (!place_free(x+hspeed, y+vspeed-1)) {
    if ( vspeed &gt; 0 ) {
        for ( i = vspeed;  i &gt;= 0 &amp;&amp; isFalling == true; i --)
        {
            if (place_free(x+hspeed, y+i)) {
                vspeed = 0;
                y += i;
                audio_play_sound(player_jump_end, 1, false);
                isFalling = false;
            }
        } if(isFalling) {
            show_message("Error: Invalid Y Coordinate. Current Coordinates: (" + string(x) + "," + string(y) + ")");
        }
    }
}

//Sprint check and drain
if (self.isSprinting) {
    self.sprintMeter -= PLAYER_SPRINT_DRAIN;
    if(self.sprintMeter &lt;= 0) {
        self.isSprinting = false;
        self.sprintMeter = 0;
    }
} else if (self.sprintMeter &lt; PLAYER_SPRINT_MAX) { //Sprint recovery
    self.sprintMeter += getRecovery(self);
    if(self.sprintMeter &gt; PLAYER_SPRINT_MAX)
        self.sprintMeter = PLAYER_SPRINT_MAX;
}

x+=hspeed;
y+=vspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
